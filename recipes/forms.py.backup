# recipes/forms.py
from django import forms
from django.forms import inlineformset_factory
from .models import (Recipe, RecipeIngredient, RecipeStep, Tag, Ingredient, 
                     Unit, Comment, Rating)

class RecipeForm(forms.ModelForm):
    """Main recipe form"""
    
    class Meta:
        model = Recipe
        fields = ['title', 'description', 'prep_time', 'cook_time', 'servings', 'image', 'image_url', 'tags']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Enter recipe title...'
            }),
            'description': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Tell us about this recipe...'
            }),
            'prep_time': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': '0',
                'placeholder': 'Minutes'
            }),
            'cook_time': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': '0',
                'placeholder': 'Minutes'
            }),
            'servings': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': '1',
                'placeholder': 'Number of servings'
            }),
            'image': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'image_url': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'Or paste image URL (optional)'
            }),
            'tags': forms.CheckboxSelectMultiple(attrs={
                'class': 'form-check-input'
            })
        }
        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Make tags optional and group by type
        self.fields['tags'].required = False
        self.fields['tags'].queryset = Tag.objects.all().order_by('tag_type', 'name')
        
        # Create a custom widget that groups tags by category
        tag_choices = []
        current_type = None
        for tag in Tag.objects.all().order_by('tag_type', 'name'):
            if tag.tag_type != current_type:
                current_type = tag.tag_type
                if tag_choices:  # Add spacing between groups
                    tag_choices.append(('', ''))
            tag_choices.append((tag.id, tag.name))
        
        # Set help text
        help_text = ("Select all applicable tags. Choose from dietary "
                     "restrictions, cuisines, meal types, cooking methods, "
                     "and difficulty levels.")
        self.fields['tags'].help_text = help_text


class RecipeIngredientForm(forms.ModelForm):
    """Form for recipe ingredients"""
    
    class Meta:
        model = RecipeIngredient
        fields = ['ingredient', 'quantity', 'unit', 'notes', 'order']
        widgets = {
            'ingredient': forms.Select(attrs={
                'class': 'form-select ingredient-select',
                'data-placeholder': 'Choose ingredient...'
            }),
            'quantity': forms.NumberInput(attrs={
                'class': 'form-control',
                'step': '0.01',
                'min': '0',
                'placeholder': 'Amount'
            }),
            'unit': forms.Select(attrs={
                'class': 'form-select',
                'data-placeholder': 'Unit...'
            }),
            'notes': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., diced, room temp...'
            }),
            'order': forms.HiddenInput(attrs={
                'class': 'form-control ingredient-order',
                'value': '1'  # Default value
            })
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Order ingredients alphabetically  
        ingredients = Ingredient.objects.all().order_by('name')
        self.fields['ingredient'].queryset = ingredients
        units = Unit.objects.all().order_by('unit_type', 'name')
        self.fields['unit'].queryset = units


class RecipeStepForm(forms.ModelForm):
    """Form for recipe steps"""
    
    class Meta:
        model = RecipeStep
        fields = ['step_number', 'instruction', 'image', 'image_url']
        widgets = {
            'step_number': forms.HiddenInput(attrs={
                'class': 'form-control step-number',
                'value': '1'  # Default value - will be updated by JavaScript
            }),
            'instruction': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Describe this step in detail...'
            }),
            'image': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
            'image_url': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'Or paste image URL (optional)'
            })
        }


# Create formsets for dynamic adding of ingredients and steps
RecipeIngredientFormSet = inlineformset_factory(
    Recipe, 
    RecipeIngredient,
    form=RecipeIngredientForm,
    extra=1,  # Start with just 1 empty ingredient form
    can_delete=True,
    min_num=1,  # Require at least 1 ingredient
    validate_min=True,
)

RecipeStepFormSet = inlineformset_factory(
    Recipe,
    RecipeStep,
    form=RecipeStepForm,
    extra=1,  # Start with just 1 empty step form
    can_delete=True,
    min_num=1,  # Require at least 1 step
    validate_min=True,
)


class CommentForm(forms.ModelForm):
    """Form for adding comments to recipes"""
    
    class Meta:
        model = Comment
        fields = ['content']
        widgets = {
            'content': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Share your thoughts about this recipe...'
            })
        }


class RatingForm(forms.ModelForm):
    """Form for rating recipes"""
    
    class Meta:
        model = Rating
        fields = ['rating']
        widgets = {
            'rating': forms.NumberInput(attrs={
                'class': 'form-control',
                'min': '1',
                'max': '5',
                'step': '1'
            })
        }
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['rating'].required = True
